name: Web Deploy

on:
  push:
    branches: [main]
    paths:
      - 'apps/marketing/**'
      - 'apps/dashboard/**'
      - 'vercel.json'
  pull_request:
    branches: [main]
    paths:
      - 'apps/marketing/**'
      - 'apps/dashboard/**'
  workflow_dispatch:

env:
  VERCEL_ORG_ID: team_E06jYKBd0fLuTP9d98TgkmDB
  VERCEL_PROJECT_ID: prj_MRCZDXWDTRRTyRRfHJ5ornncrIFv

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [marketing, dashboard]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/${{ matrix.app }}/package-lock.json
      
      - name: Install dependencies
        run: |
          cd apps/${{ matrix.app }}
          npm ci
      
      - name: Run tests
        run: |
          cd apps/${{ matrix.app }}
          npm run test -- --ci --reporters=default --passWithNoTests
      
      - name: Build application
        run: |
          cd apps/${{ matrix.app }}
          npm run build

  deploy-preview:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Validate required secrets
        run: |
          required_secrets=(
            "VERCEL_TOKEN"
            "NEXT_PUBLIC_API_URL"
            "NEXT_PUBLIC_BUILD_STAMP"
          )
          
          for secret in "${required_secrets[@]}"; do
            if [[ -z "${!secret:-}" ]]; then
              echo "‚ùå Missing required secret: $secret"
              exit 1
            else
              echo "‚úÖ Secret present: $secret"
            fi
          done
          
          echo "üéâ All required secrets present"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_BUILD_STAMP: ${{ secrets.NEXT_PUBLIC_BUILD_STAMP }}
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}
      
      - name: Verify deployment
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Test marketing site
          curl -f https://vat-evo-marketing-gmijoswiy-gabriellagziels-projects.vercel.app || exit 1
          
          echo "‚úÖ Production deployment successful"
          echo "Marketing URL: https://vat-evo-marketing-gmijoswiy-gabriellagziels-projects.vercel.app"
